{{define "header"}}
<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      *:not(:defined) {
        display: none;
      }
    </style>
    <link href="/dist/style.css?={{ timeNow }}" rel="stylesheet" />
    <script type="module" src="/dist/bundle.js?={{ timeNow }}"></script>
    <script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>

    <link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="48x48" href="/static/favicon-48.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16.png">
    <link rel="manifest" href="/static/manifest.json">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
                    
  </head>
  <body class="h-screen bg-gray-100">
    <header class="bg-gradient-to-r from-blue-800 to-indigo-800 text-white">
      <nav class="px-8 justify-between py-6 flex items-center space-x-12">
        <div class="text-4xl font-serif">Todo list</div>
        {{ if not .HideButtons }}
          <div id="modal-button-container">
            <my-open-modal-button class="mr-4" modalId="bulkModal">Bulk Upload</my-open-modal-button>
            {{if gt (len .ToDos) 0}}
              <my-open-modal-button id="delete-all-button" modalid="deleteModal">Delete All</my-open-modal-button>
            {{end}}
          </div>
      {{ end }}
      </nav>
    </header>
{{end}}
    <!-- Each page's content goes here. -->
{{define "footer"}}
    <script>
        document.body.addEventListener('htmx:configRequest', (event) => {
          event.detail.headers['X-CSRF-Token'] = '{{ csrfField | unescapeHTML }}';
        })

        let timeout = null;
        document.body.addEventListener('htmx:responseError', (event) => {
                clearTimeout(timeout);
                const errorAlert = document.getElementById('errorAlert');
                errorAlert.classList.remove('hidden');
                timeout = setTimeout(() => {
                    errorAlert.classList.add('hidden');
                }, 3000); // Hide the alert after 3 seconds
            });
    </script>
    <form 
      hx-post="/bulk-upload"  
      enctype="multipart/form-data"
      hx-target="#all-lists"
      hx-swap="outerHTML"                                 
    >
    <my-modal id="bulkModal" title="Bulk upload some todos">
      <div 
        class="mb-4"
        slot="content"
      >
        <h1>Let's bulk add some todos with a CSV</h1>
        <div class="w-full p-6 bg-white rounded shadow-md">
            <label for="csv" class="block text-sm font-medium text-gray-700">Upload CSV File</label>
            <div id="csv-dropzone" class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div id="csv-has-svg" class="hidden space-y-1 text-center">
                <h1>Nice, you picked a csv: <span id="csv-title"></span></h1>
              </div>
              <div id="csv-svg" class="space-y-1 text-center">
                <svg
                  class="mx-auto h-12 w-12 text-gray-400"
                  stroke="currentColor"
                  fill="none"
                  viewBox="0 0 48 48"
                  aria-hidden="true"
                >
                  <path
                    d="M37 20v-7a1 1 0 00-1-1H12a1 1 0 00-1 1v7h26zm3 6v10H8V26h32zm-1 1H9v8h30v-8zm-9-6v-3a1 1 0 00-1-1H18a1 1 0 00-1 1v3h12zm-8 1v10h8V21h-8z"
                  ></path>
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="csv" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                    <span>Upload a CSV file</span>
                    <input id="csv" name="csv" type="file" class="sr-only">
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">CSV up to 10MB</p>
              </div>
            </div>
        </div>
      </div>
      <my-button disabled id="csv-submit-button" type="submit" class="mr-4" slot="action">
        Upload
      </my-button>
    </my-modal>
    </form>

    <my-modal id="deleteModal" title="Delete all todos">
      <div 
        class="mb-4"
        slot="content"
      >
        <p>Do you want to delete all the todos?</p>
      </div>
      <my-button class="mr-4" slot="action" hx-swap="none"  hx-delete="/">
        Delete all
      </my-button>
    </my-modal>
       <div id="errorAlert" class="hidden fixed top-0 left-0 w-full bg-red-500 text-white text-center py-2">
            Network request failed! Please try again later.
        </div>
       <script> 
            const CLASS_TO_TOGGLE = "bg-gray-300";
            const csvDropzone = document.getElementById("csv-dropzone");
            const csvSubmitButton = document.getElementById("csv-submit-button");
            const csvSvg = document.getElementById("csv-svg");
            const csvHasSvg = document.getElementById("csv-has-svg");
            const csvTitle = document.getElementById("csv-title")

            csvDropzone.addEventListener("dragover", function (event) {
                event.preventDefault();
                csvDropzone.style.border = "2px dashed #4A5568";
            });

            csvDropzone.addEventListener("dragleave", function (event) {
                event.preventDefault();
                csvDropzone.style.border = "none";
            });

            csvDropzone.addEventListener("drop", function (event) {
                event.preventDefault();
                csvDropzone.style.border = "none";
                const csvFile = event.dataTransfer.files[0];

                if (csvFile.type === "text/csv" || csvFile.type === "application/vnd.ms-excel") {
                    csvInput.files = event.dataTransfer.files;
                    csvSubmitButton.disabled = false;
                    csvDropzone.classList.add(CLASS_TO_TOGGLE); // Add a class to the form
                    csvSvg.classList.add('hidden');
                    csvHasSvg.classList.remove('hidden');
                    csvTitle.innerText = csvFile.name;

                } else {
                    alert("Please drop a valid CSV file.");
                }
            });

            const csvInput = document.getElementById("csv");

            csvInput.addEventListener("change", function (event) {
                const csvFile = event.target.files[0];

                if (csvFile.type === "text/csv" || csvFile.type === "application/vnd.ms-excel") {
                    csvSvg.classList.add('hidden');
                    csvHasSvg.classList.remove('hidden');
                    csvDropzone.classList.add(CLASS_TO_TOGGLE); // Add a class to the form
                    csvSubmitButton.disabled = false;
                    csvTitle.innerText = csvFile.name;
                  
                } else {
                    alert("Please choose a valid CSV file.");
                }
            });

            // Reset the background if the file input changes without selecting a file
            csvInput.addEventListener("click", function () {
                csvSubmitButton.disabled = true;
                csvSvg.classList.remove('hidden')
                csvHasSvg.classList.add('hidden');
                csvDropzone.classList.remove(CLASS_TO_TOGGLE);
            });

            function onClose() {
              csvSubmitButton.disabled = true;
              csvHasSvg.classList.add('hidden');
              csvSvg.classList.remove('hidden');
              csvDropzone.classList.remove(CLASS_TO_TOGGLE); // Add a class to the form
              csvInput.value = "";
            }

          const modal = document.getElementById("bulkModal");
          modal.onClose = onClose;
      </script>
  </body>
</html>
{{end}}
